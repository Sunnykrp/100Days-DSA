class Solution
{
    public:
    void merge(int arr[], int l, int m, int r) {
         // Your code here
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[n1];
        int R[n2];
        int k=l;
        
        //insert in L[]
        for(int i = 0 ; i < n1 ; i++) {
            L[i] = arr[k];
            k++;
        }
        
        //insert in R[]
        for(int i = 0 ; i < n2 ; i++) {
            R[i] = arr[k];
            k++;
        }
        
        //merge both in sorted order
        int i = 0;
        int j = 0;
        k = l;
        
        while(i<n1 && j<n2) {
            if(L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
                k++;
            }
            
            else {
                arr[k] = R[j];
                j++;
                k++;
            }
        }
          
        //if R[] ends hence insert i till end  
        while(i < n1) {
            arr[k] = L[i];
            k++;
            i++;
        }
          
        //if L[] end hance insert j till end   
        while(j < n2) {
            arr[k] = R[j];
            k++;
            j++;
        }
        
    }
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        //Basecase
        if(l >= r) return;
        
        int mid = l + ( r - l ) / 2;
        
        mergeSort( arr, l, mid);
        mergeSort( arr, mid + 1, r);
        
        merge( arr, l, mid, r);
    }
};
